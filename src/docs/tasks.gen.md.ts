import {dirname, relative, basename} from 'path';

import {Gen, toOutputFileName} from '../gen/gen.js';
import {createNodeRunHost} from '../run/nodeRunHost.js';
import {
	paths,
	toBasePath,
	toBuildId,
	toSourceId,
	toPathParts,
	toPathSegments,
} from '../paths.js';
import {toTaskName} from '../run/task.js';
import {stripStart} from '../utils/string.js';
import {last} from '../utils/array.js';

// This is the first simple implementation of Gro's automated docs.
// It combines Gro's gen and task systems
// to generate a markdown file describing all of the project's tasks.
// Other projects that use Gro should be able to import this module
// or other otherwise get frictionless access to this specific use case,
// and they should be able to extend or customize it to any degree.

// TODO needs some cleanup and better APIs - paths are confusing and verbose!
// TODO add backlinks to every document that links to this one

export const gen: Gen = async ({originId}) => {
	const {findTaskModules} = createNodeRunHost({logLevel: 0});
	const taskSourceIds = await findTaskModules(paths.source);

	// TODO need to get this from project config or something
	const rootPath = last(toPathSegments(paths.root));

	const originDir = dirname(originId);
	const originBase = basename(originId);

	const baseDir = paths.source;
	const relativePath = stripStart(originId, baseDir);
	const relativeDir = dirname(relativePath);

	// TODO should this be passed in the context, like `defaultOutputFileName`?
	const outputFileName = toOutputFileName(originBase);

	// TODO this is GitHub-specific
	const rootLink = `[${rootPath}](/../..)`;

	// TODO do we want to use absolute paths instead of relative paths,
	// because GitHub works with them and it simplifies the code?
	const pathParts = toPathParts(relativeDir).map(
		relativePathPart =>
			`[${last(toPathSegments(relativePathPart))}](${relative(
				originDir,
				toSourceId(relativePathPart),
			) || './'})`,
	);
	const breadcrumbs = [rootLink, ...pathParts, outputFileName]
		.map(line => `> <sub>${line}</sub>`)
		.join(' <sub>/</sub> \n');

	// TODO render the footer with the originId
	return `# Tasks

${breadcrumbs}

## all tasks

${taskSourceIds.reduce(
	(taskList, id) =>
		taskList +
		`- [${toBasePath(toSourceId(toTaskName(toBuildId(id))))}](${relative(
			originDir,
			id,
		)})\n`,
	'',
)}
## usage

\`\`\`bash
$ gro run some/task/name
\`\`\`

${breadcrumbs}

> <sub>generated by [${originBase}](${originBase})</sub>
`;
};
